// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Change {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Change {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChange(bb:flatbuffers.ByteBuffer, obj?:Change):Change {
  return (obj || new Change()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChange(bb:flatbuffers.ByteBuffer, obj?:Change):Change {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Change()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

charId():string|null
charId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

parentCharId():string|null
parentCharId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parentCharId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isRight():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

disambiguator():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

character():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

static startChange(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addCharId(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, charIdOffset, 0);
}

static addParentCharId(builder:flatbuffers.Builder, parentCharIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, parentCharIdOffset, 0);
}

static addIsRight(builder:flatbuffers.Builder, isRight:boolean) {
  builder.addFieldInt8(2, +isRight, +false);
}

static addDisambiguator(builder:flatbuffers.Builder, disambiguator:number) {
  builder.addFieldInt32(3, disambiguator, 0);
}

static addCharacter(builder:flatbuffers.Builder, character:number) {
  builder.addFieldInt32(4, character, 0);
}

static endChange(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChange(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset, parentCharIdOffset:flatbuffers.Offset, isRight:boolean, disambiguator:number, character:number|null):flatbuffers.Offset {
  Change.startChange(builder);
  Change.addCharId(builder, charIdOffset);
  Change.addParentCharId(builder, parentCharIdOffset);
  Change.addIsRight(builder, isRight);
  Change.addDisambiguator(builder, disambiguator);
  if (character !== null)
    Change.addCharacter(builder, character);
  return Change.endChange(builder);
}
}
