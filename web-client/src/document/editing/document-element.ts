// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DocumentElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DocumentElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDocumentElement(bb:flatbuffers.ByteBuffer, obj?:DocumentElement):DocumentElement {
  return (obj || new DocumentElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDocumentElement(bb:flatbuffers.ByteBuffer, obj?:DocumentElement):DocumentElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DocumentElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

charId():string|null
charId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

parentCharId():string|null
parentCharId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parentCharId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isRight():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

disambiguator():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

character():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startDocumentElement(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addCharId(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, charIdOffset, 0);
}

static addParentCharId(builder:flatbuffers.Builder, parentCharIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, parentCharIdOffset, 0);
}

static addIsRight(builder:flatbuffers.Builder, isRight:boolean) {
  builder.addFieldInt8(2, +isRight, +false);
}

static addDisambiguator(builder:flatbuffers.Builder, disambiguator:number) {
  builder.addFieldInt32(3, disambiguator, 0);
}

static addCharacter(builder:flatbuffers.Builder, character:number) {
  builder.addFieldInt32(4, character, 0);
}

static endDocumentElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDocumentElement(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset, parentCharIdOffset:flatbuffers.Offset, isRight:boolean, disambiguator:number|null, character:number):flatbuffers.Offset {
  DocumentElement.startDocumentElement(builder);
  DocumentElement.addCharId(builder, charIdOffset);
  DocumentElement.addParentCharId(builder, parentCharIdOffset);
  DocumentElement.addIsRight(builder, isRight);
  if (disambiguator !== null)
    DocumentElement.addDisambiguator(builder, disambiguator);
  DocumentElement.addCharacter(builder, character);
  return DocumentElement.endDocumentElement(builder);
}
}
