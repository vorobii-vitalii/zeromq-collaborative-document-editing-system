// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Response, unionToResponse, unionListToResponse } from './response';


export class ResponseHolder {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseHolder {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseHolder(bb:flatbuffers.ByteBuffer, obj?:ResponseHolder):ResponseHolder {
  return (obj || new ResponseHolder()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseHolder(bb:flatbuffers.ByteBuffer, obj?:ResponseHolder):ResponseHolder {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseHolder()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

responseType():Response {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Response.NONE;
}

response<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startResponseHolder(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addResponseType(builder:flatbuffers.Builder, responseType:Response) {
  builder.addFieldInt8(0, responseType, Response.NONE);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, responseOffset, 0);
}

static endResponseHolder(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishResponseHolderBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedResponseHolderBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createResponseHolder(builder:flatbuffers.Builder, responseType:Response, responseOffset:flatbuffers.Offset):flatbuffers.Offset {
  ResponseHolder.startResponseHolder(builder);
  ResponseHolder.addResponseType(builder, responseType);
  ResponseHolder.addResponse(builder, responseOffset);
  return ResponseHolder.endResponseHolder(builder);
}
}
